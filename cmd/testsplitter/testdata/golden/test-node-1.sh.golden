#!/bin/bash

set -euo pipefail

LINES=$(cat <<'EOF'
example/pkg3 '^(TestAbs)$'
example/pkg1 '^(TestMultiplyZero|TestAdd|TestAddNegative)$'
example/pkg2 '^(TestReverse|TestReverseEmpty)$'
EOF
)

FLAGS="-test.timeout=20m -test.v"
count=0
commands=()

export PATH="/work/testsplitter-dev/cmd/testsplitter/testdata/test-bin:$PATH"

while IFS= read -r line; do
  if [ -z "$line" ]; then
    continue
  fi
  count=$((count + 1))
  report="test-reports/junit-1-${count}.xml"
  json="/work/testsplitter-dev/cmd/testsplitter/testdata/test-json/test-1-${count}.json"
  pkg="${line%% *}"
  bin="${pkg//\//.}.test"
  runs="${line#$pkg }"

  CMD="cd ${pkg} && gotestsum -f standard-verbose --jsonfile ${json} --packages ${pkg} --rerun-fails --junitfile ${report} --junitfile-testsuite-name relative --junitfile-testcase-classname relative --raw-command -- go tool test2json -t -p ${pkg} ${bin} ${FLAGS} -test.v=test2json -test.run ${runs}"
  echo "$CMD"
  commands+=("$CMD")
done <<< "$LINES"

printf "\"%s\"\n" "${commands[@]}" | xargs -I {} -P 4 bash -c '{}'

cat /work/testsplitter-dev/cmd/testsplitter/testdata/test-json/*.json > /work/testsplitter-dev/cmd/testsplitter/testdata/test-json/test-1.json || true
rm /work/testsplitter-dev/cmd/testsplitter/testdata/test-json/test-1-*.json || true
